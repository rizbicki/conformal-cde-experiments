density=dnorm(grid_mu,mu_linha,1/sqrt(tau_linha_2)),
distribution="posterior"))
ggplot(data_plot)+
geom_line(aes(x=mu,y=density,color=distribution),size=2)+
theme_minimal(base_size = 14)+xlab(expression(mu))+ylab("Density")
grid_mu <- seq(100,200,length.out = 1000)
library(ggplot2)
# priori para mu (altura média de um brasileiro)
mu0 <- 165
sigma0 <- 20
tau0_2 <- 1/(sigma0)^2
data_plot <- data.frame(mu=grid_mu,
density=dnorm(grid_mu,mu0,sigma0),
distribution="prior")
ggplot(data_plot)+
geom_line(aes(x=mu,y=density))
# dados (altura medida de um indivíduo - normal com média conhecida)
x <- 180
sigma <- 5
tau_2 <- 1/(sigma)^2
# posteriori
tau_linha_2 <- tau0_2 + tau_2
mu_linha <- tau0_2/tau_linha_2*mu0+
tau_2/tau_linha_2*x
data_plot <- rbind(data_plot,
data.frame(mu=grid_mu,
density=dnorm(grid_mu,mu_linha,1/sqrt(tau_linha_2)),
distribution="posterior"))
ggplot(data_plot)+
geom_line(aes(x=mu,y=density,color=distribution),size=2)+
theme_minimal(base_size = 14)+xlab(expression(mu))+ylab("Density")
library(ggplot2)
grid_mu <- seq(100,200,length.out = 1000)
# priori para mu (altura média de um brasileiro)
mu0 <- 165
sigma0 <- 10
tau0_2 <- 1/(sigma0)^2
data_plot <- data.frame(mu=grid_mu,
density=dnorm(grid_mu,mu0,sigma0),
distribution="priori")
# dados (altura medida de um indivíduo - normal com média conhecida)
x <- 180
sigma <- 5
tau_2 <- 1/(sigma)^2
# posteriori
tau_linha_2 <- tau0_2 + tau_2
mu_linha <- tau0_2/tau_linha_2*mu0+
tau_2/tau_linha_2*x
data_plot <- rbind(data_plot,
data.frame(mu=grid_mu,
density=dnorm(grid_mu,mu_linha,1/sqrt(tau_linha_2)),
distribution="posteriori"))
ggplot(data_plot)+
geom_line(aes(x=mu,y=density,color=distribution),size=1.2)+
theme_minimal(base_size = 14)+xlab(expression(mu))+ylab("Densidade")+
theme(legend.title=element_blank())
# X ~ N(mu,sigma)
sigma <- 7.5
mu <- 170
alturas <- rnorm(100,mu,sigma)
hist(alturas)
# Frequentista, EMV
mean(alturas)
#  Bayesiano
mu0 <- 165
lambda <- 1
grid_tau <- seq(0,0.1,length.out = 10000)
beta <- 1
alpha <- 0.1*beta
hist(rgamma(1000,
alpha,beta))
plot(grid_tau,dgamma(grid_tau,
alpha,beta))
hist(rgamma(1000,
alpha,beta))
plot(grid_tau,dgamma(grid_tau,
alpha,beta))
grid_tau <- seq(0,0.01,length.out = 10000)
beta <- 1
alpha <- 0.1*beta
plot(grid_tau,dgamma(grid_tau,
alpha,beta))
?dgamma
# X ~ N(mu,sigma)
sigma <- 0.75
mu <- 1.70
alturas <- rnorm(100,mu,sigma)
hist(alturas)
grid_tau <- seq(0,0.01,
length.out = 10000)
beta <- 1
alpha <- 100*beta
plot(grid_tau,dgamma(grid_tau,
alpha,beta))
grid_tau <- seq(0,300,
length.out = 10000)
beta <- 1
alpha <- 100*beta
plot(grid_tau,dgamma(grid_tau,
alpha,beta))
setwd("/mnt/62e7a18d-9e67-46b5-8b12-bcb7dc0301ab/Dropbox/Izbicki/Research/UFSCar/Gilson/conformal-cde-experiments/simulations")
source("../requirements.R")
source("../base_functions.R")
folder <- "../rds/bimodal/"
# if x is given, only generate response again
generate_bimodal <- function(n,d,x=NULL)
{
if(is.null(x))
{
x=matrix(runif(n*d,-1.5,1.5),n,d)
}
f=(x[,1]-1)^2*(x[,1]+1)
g=rep(0,n)
g[x[,1]> -0.5]=2*sqrt(x[x[,1]> -0.5,1]+0.5)
s=1/4+abs(x[,1])
# response
y=ifelse(runif(n)>0.5,f-g,f+g)+rnorm(n,0,sqrt(s))
return(list(x=x,y=y))
}
n_fits <- 10 # total numer of I1 datasets
n_repetitions <- 100 # total numer of I2 datasets
n_each_set_grid <- c(200,500,1000,2500,5000) # size of I1 and I2
n_test <- 100 # to check coverage
d <- 50
k <- 100
percent_train <- 0.7
alpha <- 0.1
generate_data <- function(n,x=NULL) {generate_bimodal(n=n,d=d,x=x)}
data_test_aux <- generate_data(n=n_test) # used to fix x test
plot(data_test_aux$x[,1],data_test_aux$y)
cd_split_global <- list()
cd_split_local <- list()
dist_split <- list()
reg_split <- list()
reg_split_w <- list()
n_each_index=2
print(n_each_index/length(n_each_set_grid))
rep <- 1
bands_global <- list()
bands_local <- list()
bands_dist <- list()
bands_reg <- list()
bands_reg_w <- list()
n_fits_index=2
data_I1 <- generate_data(n=n_each_set_grid[n_each_index])
which_train <- sample(1:length(data_I1$y),length(data_I1$y)*percent_train)
cde_fit <- fit_density_forest(xTrain=data_I1$x[which_train,,drop=FALSE],
yTrain = data_I1$y[which_train,drop=FALSE],
xValidation=data_I1$x[-which_train,,drop=FALSE],
yValidation = data_I1$y[-which_train,drop=FALSE])
data_I2 <- generate_data(n=n_each_set_grid[n_each_index])
pred_I2 <- predict(cde_fit,data_I2$x)
t_grid <- seq(0,max(pred_I2$CDE),length.out = 1000)
xTrain=data_I2$x
yTrain = data_I2$y
xTest=data_test_aux$x
pred_test <- predict(cde_fit,xTest)
pred_train <- predict(cde_fit,xTrain)
# observed densities:
which_select <- cbind(1:length(yTrain),
which_neighbors(as.matrix(pred_train$z),
as.matrix(yTrain),k=1))
conformity_score_train <- pred_train$CDE[which_select]
#prediction_bands <- list()
prediction_bands_which_belong <- list()
ths <- rep(NA,nrow(xTest))
g_train <- matrix(NA,nrow(xTrain),length(t_grid))
for(ii in 1:nrow(xTrain))
{
g_train[ii,] <- profile_density(t_grid,pred_train$z,
pred_train$CDE[ii,])
}
for(ii in 1:nrow(xTest))
{
g_test <- profile_density(t_grid,pred_test$z,
pred_test$CDE[ii,])
neighbors <- which_neighbors(g_train,t(g_test),k=k)
ths[ii] <- quantile(conformity_score_train[neighbors],probs=alpha)
#prediction_bands[[ii]] <- pred_test$z[pred_test$CDE[ii,]>=ths]
prediction_bands_which_belong[[ii]] <- pred_test$CDE[ii,]>=ths[ii]
}
# CD-split local
fit_cd_split_local <- cd_split_prediction_bands(cde_fit,
xTrain=data_I2$x,
yTrain = data_I2$y,
k=k,
xTest=data_test_aux$x,
t_grid=t_grid,
alpha=alpha)
# Dist-split
fit_dist_split <- dist_split_prediction_bands(cde_fit,
xTrain=data_I2$x,yTrain = data_I2$y,
xTest=data_test_aux$x,
alpha=alpha)
# CD-split global
fit_cd_split_global <- cd_split_prediction_bands(cde_fit,
xTrain=data_I2$x,yTrain = data_I2$y,
k=nrow(data_I2$x),
xTest=data_test_aux$x,
t_grid=t_grid,
alpha=alpha)
regression_fit <- fit_regression_forest(xTrain=data_I1$x[which_train,,drop=FALSE],
yTrain = data_I1$y[which_train,drop=FALSE],
xValidation=data_I1$x[-which_train,,drop=FALSE],
yValidation = data_I1$y[-which_train,drop=FALSE])
regression_fit_mean_error <- fit_regression_mean_error_forest(xTrain=data_I1$x[which_train,,drop=FALSE],
yTrain = data_I1$y[which_train,drop=FALSE],
xValidation=data_I1$x[-which_train,,drop=FALSE],
yValidation = data_I1$y[-which_train,drop=FALSE])
# Reg-split
fit_reg_split <- reg_split_prediction_bands(regression_fit,
xTrain=data_I2$x,
yTrain = data_I2$y,
xTest=data_test_aux$x,
alpha=alpha,
y_grid = pred_I2$z)
# Reg-split
fit_reg_weighted_split <- reg_weighted_split_prediction_bands(regression_fit_mean_error$fit_mean,
regression_fit_mean_error$fit_error,
xTrain=data_I2$x,yTrain = data_I2$y,
xTest=data_test_aux$x,
alpha=alpha,
y_grid = pred_I2$z)
data_test <- generate_data(n=n_test,x=data_test_aux$x)
cd_split_prediction_bands_evalY(fit_cd_split_global,
yTest=data_test$y)
cd_split_prediction_bands_evalY(fit_cd_split_local,
yTest=data_test$y)
dist_split_prediction_bands_evalY(fit_dist_split,
yTest=data_test$y)
reg_split_prediction_bands_evalY(fit_reg_split,
yTest=data_test$y)
- reg_weighted_split_prediction_bands_evalY(fit_reg_weighted_split,
yTest=data_test$y)
reg_weighted_split_prediction_bands_evalY(fit_reg_weighted_split,
yTest=data_test$y)
n_test <- 1000 # to check coverage
generate_data <- function(n,x=NULL) {generate_bimodal(n=n,d=d,x=x)}
data_test_aux <- generate_data(n=n_test) # used to fix x test
plot(data_test_aux$x[,1],data_test_aux$y)
cd_split_global <- list()
cd_split_local <- list()
dist_split <- list()
reg_split <- list()
reg_split_w <- list()
print(n_each_index/length(n_each_set_grid))
rep <- 1
bands_global <- list()
bands_local <- list()
bands_dist <- list()
bands_reg <- list()
bands_reg_w <- list()
data_I1 <- generate_data(n=n_each_set_grid[n_each_index])
which_train <- sample(1:length(data_I1$y),length(data_I1$y)*percent_train)
cde_fit <- fit_density_forest(xTrain=data_I1$x[which_train,,drop=FALSE],
yTrain = data_I1$y[which_train,drop=FALSE],
xValidation=data_I1$x[-which_train,,drop=FALSE],
yValidation = data_I1$y[-which_train,drop=FALSE])
regression_fit <- fit_regression_forest(xTrain=data_I1$x[which_train,,drop=FALSE],
yTrain = data_I1$y[which_train,drop=FALSE],
xValidation=data_I1$x[-which_train,,drop=FALSE],
yValidation = data_I1$y[-which_train,drop=FALSE])
regression_fit_mean_error <- fit_regression_mean_error_forest(xTrain=data_I1$x[which_train,,drop=FALSE],
yTrain = data_I1$y[which_train,drop=FALSE],
xValidation=data_I1$x[-which_train,,drop=FALSE],
yValidation = data_I1$y[-which_train,drop=FALSE])
data_I2 <- generate_data(n=n_each_set_grid[n_each_index])
pred_I2 <- predict(cde_fit,data_I2$x)
t_grid <- seq(0,max(pred_I2$CDE),length.out = 1000)
xTrain=data_I2$x
yTrain = data_I2$y
xTest=data_test_aux$x
pred_test <- predict(cde_fit,xTest)
pred_train <- predict(cde_fit,xTrain)
# observed densities:
which_select <- cbind(1:length(yTrain),
which_neighbors(as.matrix(pred_train$z),
as.matrix(yTrain),k=1))
conformity_score_train <- pred_train$CDE[which_select]
#prediction_bands <- list()
prediction_bands_which_belong <- list()
ths <- rep(NA,nrow(xTest))
g_train <- matrix(NA,nrow(xTrain),length(t_grid))
for(ii in 1:nrow(xTrain))
{
g_train[ii,] <- profile_density(t_grid,pred_train$z,
pred_train$CDE[ii,])
}
for(ii in 1:nrow(xTest))
{
g_test <- profile_density(t_grid,pred_test$z,
pred_test$CDE[ii,])
neighbors <- which_neighbors(g_train,t(g_test),k=k)
ths[ii] <- quantile(conformity_score_train[neighbors],probs=alpha)
#prediction_bands[[ii]] <- pred_test$z[pred_test$CDE[ii,]>=ths]
prediction_bands_which_belong[[ii]] <- pred_test$CDE[ii,]>=ths[ii]
}
g_test <- profile_density(t_grid,pred_test$z,
pred_test$CDE[ii,])
neighbors <- which_neighbors(g_train,t(g_test),k=k)
ths[ii] <- quantile(conformity_score_train[neighbors],probs=alpha)
source("../requirements.R")
source("../base_functions.R")
folder <- "../rds/bimodal/"
dir.create(folder, showWarnings = FALSE)
# if x is given, only generate response again
generate_bimodal <- function(n,d,x=NULL)
{
if(is.null(x))
{
x=matrix(runif(n*d,-1.5,1.5),n,d)
}
f=(x[,1]-1)^2*(x[,1]+1)
g=rep(0,n)
g[x[,1]> -0.5]=2*sqrt(x[x[,1]> -0.5,1]+0.5)
s=1/4+abs(x[,1])
# response
y=ifelse(runif(n)>0.5,f-g,f+g)+rnorm(n,0,sqrt(s))
return(list(x=x,y=y))
}
n_fits <- 10 # total numer of I1 datasets
n_repetitions <- 100 # total numer of I2 datasets
n_each_set_grid <- c(200,500,1000,2500,5000) # size of I1 and I2
n_test <- 1000 # to check coverage
d <- 50
k <- 100
percent_train <- 0.7
alpha <- 0.1
generate_data <- function(n,x=NULL) {generate_bimodal(n=n,d=d,x=x)}
data_test_aux <- generate_data(n=n_test) # used to fix x test
plot(data_test_aux$x[,1],data_test_aux$y)
cd_split_global <- list()
cd_split_local <- list()
dist_split <- list()
reg_split <- list()
reg_split_w <- list()
for(n_each_index in 1:length(n_each_set_grid))
{
print(n_each_index/length(n_each_set_grid))
rep <- 1
bands_global <- list()
bands_local <- list()
bands_dist <- list()
bands_reg <- list()
bands_reg_w <- list()
for(n_fits_index in 1:n_fits)
{
cat(".")
data_I1 <- generate_data(n=n_each_set_grid[n_each_index])
which_train <- sample(1:length(data_I1$y),length(data_I1$y)*percent_train)
cde_fit <- fit_density_forest(xTrain=data_I1$x[which_train,,drop=FALSE],
yTrain = data_I1$y[which_train,drop=FALSE],
xValidation=data_I1$x[-which_train,,drop=FALSE],
yValidation = data_I1$y[-which_train,drop=FALSE])
regression_fit <- fit_regression_forest(xTrain=data_I1$x[which_train,,drop=FALSE],
yTrain = data_I1$y[which_train,drop=FALSE],
xValidation=data_I1$x[-which_train,,drop=FALSE],
yValidation = data_I1$y[-which_train,drop=FALSE])
regression_fit_mean_error <- fit_regression_mean_error_forest(xTrain=data_I1$x[which_train,,drop=FALSE],
yTrain = data_I1$y[which_train,drop=FALSE],
xValidation=data_I1$x[-which_train,,drop=FALSE],
yValidation = data_I1$y[-which_train,drop=FALSE])
for(ll in 1:n_repetitions)
{
cat(ll)
data_I2 <- generate_data(n=n_each_set_grid[n_each_index])
pred_I2 <- predict(cde_fit,data_I2$x)
t_grid <- seq(0,max(pred_I2$CDE),length.out = 1000)
# CD-split global
fit_cd_split_global <- cd_split_prediction_bands(cde_fit,
xTrain=data_I2$x,yTrain = data_I2$y,
k=nrow(data_I2$x),
xTest=data_test_aux$x,
t_grid=t_grid,
alpha=alpha)
# CD-split local
fit_cd_split_local <- cd_split_prediction_bands(cde_fit,
xTrain=data_I2$x,
yTrain = data_I2$y,
k=k,
xTest=data_test_aux$x,
t_grid=t_grid,
alpha=alpha)
# Dist-split
fit_dist_split <- dist_split_prediction_bands(cde_fit,
xTrain=data_I2$x,yTrain = data_I2$y,
xTest=data_test_aux$x,
alpha=alpha)
# Reg-split
fit_reg_split <- reg_split_prediction_bands(regression_fit,
xTrain=data_I2$x,
yTrain = data_I2$y,
xTest=data_test_aux$x,
alpha=alpha,
y_grid = pred_I2$z)
# Reg-split
fit_reg_weighted_split <- reg_weighted_split_prediction_bands(regression_fit_mean_error$fit_mean,
regression_fit_mean_error$fit_error,
xTrain=data_I2$x,yTrain = data_I2$y,
xTest=data_test_aux$x,
alpha=alpha,
y_grid = pred_I2$z)
data_test <- generate_data(n=n_test,x=data_test_aux$x)
# CD-split global
bands_global[[rep]] <- cd_split_prediction_bands_evalY(fit_cd_split_global,
yTest=data_test$y)
# CD-split local
bands_local[[rep]] <- cd_split_prediction_bands_evalY(fit_cd_split_local,
yTest=data_test$y)
# Dist-split
bands_dist[[rep]] <- dist_split_prediction_bands_evalY(fit_dist_split,
yTest=data_test$y)
# reg-split
bands_reg[[rep]] <- reg_split_prediction_bands_evalY(fit_reg_split,
yTest=data_test$y)
# reg-split weighted
bands_reg_w[[rep]] <- reg_weighted_split_prediction_bands_evalY(fit_reg_weighted_split,
yTest=data_test$y)
rep <- rep+1
gc()
}
}
cd_split_global[[n_each_index]] <- eval_prediction_bands(xTest=data_test$x,
bands_global,
alpha=alpha)
cd_split_global[[n_each_index]]$n <- n_each_set_grid[n_each_index]
rm(bands_global)
saveRDS(cd_split_global,file = paste0(folder,"cd_split_global.RDS"))
cd_split_local[[n_each_index]] <- eval_prediction_bands(xTest=data_test$x,
bands_local,
alpha=alpha)
cd_split_local[[n_each_index]]$n <- n_each_set_grid[n_each_index]
rm(bands_local)
saveRDS(cd_split_local,file = paste0(folder,"cd_split_local.RDS"))
dist_split[[n_each_index]] <- eval_prediction_bands(xTest=data_test$x,
bands_dist,
alpha=alpha)
dist_split[[n_each_index]]$n <- n_each_set_grid[n_each_index]
rm(bands_dist)
saveRDS(dist_split,file = paste0(folder,"dist_split.RDS"))
reg_split[[n_each_index]] <- eval_prediction_bands(xTest=data_test$x,
bands_reg,
alpha=alpha)
reg_split[[n_each_index]]$n <- n_each_set_grid[n_each_index]
rm(bands_reg)
saveRDS(reg_split,file = paste0(folder,"reg_split.RDS"))
reg_split_w[[n_each_index]] <- eval_prediction_bands(xTest=data_test$x,
bands_reg_w,
alpha=alpha)
rm(bands_reg_w)
reg_split_w[[n_each_index]]$n <- n_each_set_grid[n_each_index]
saveRDS(reg_split_w,file = paste0(folder,"reg_split_w.RDS"))
}
data_plot <- paste0(folder,list.files(pattern = ".RDS",path = folder)) %>%
map(readRDS)
data_plot <- lapply(data_plot, function(x) {
data <- matrix(NA,length(x),length(x[[1]]))
colnames(data) <- names(x[[1]])
for(ii in 1:length(x))
{
data[ii,] <- unlist(x[[ii]])
}
return(data)
})
names(data_plot) <- tools::file_path_sans_ext(list.files(pattern = ".RDS",path = folder))
data_plot <- ldply(data_plot, data.frame)
ggplot(data_plot) +
geom_line(aes(x=n,y=global_coverage,color=.id,linetype=.id),size=2)+
theme_minimal(base_size = 14)+ ylab("Global coverage")+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
expand_limits(y = c(0,1))+
theme(legend.title = element_blank())
ggplot(data_plot) +
geom_line(aes(x=n,y=mean_absolute_deviation_coverage,color=.id,linetype=.id),size=2)+
theme_minimal(base_size = 14)+ ylab("Conditonal coverage absolute deviation")+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
expand_limits(y = 0)+
theme(legend.title = element_blank())
ggplot(data_plot) +
geom_line(aes(x=n,y=average_size,color=.id,linetype=.id),size=2)+
theme_minimal(base_size = 14)+ ylab("Average size")+
theme(legend.title = element_blank())
ggplot(data_plot) +
geom_line(aes(x=n,y=mean_absolute_deviation_size,color=.id,linetype=.id),size=2)+
theme_minimal(base_size = 14)+ ylab("Size absolute deviation")+
theme(legend.title = element_blank())
cde_estimate=pred_test$CDE[1,]
g <- rep(NA,length(t_grid))
for(i in seq_along(t_grid))
{
g[i] <- sum(cde_estimate[cde_estimate>t_grid[i]]*(y_grid[2]-y_grid[1]))
}
y_grid=pred_test$z
g <- rep(NA,length(t_grid))
for(i in seq_along(t_grid))
{
g[i] <- sum(cde_estimate[cde_estimate>t_grid[i]]*(y_grid[2]-y_grid[1]))
}
cumsum(sort(cde_estimate))
plot(cumsum(sort(cde_estimate)))
plot(g)
plot(cumsum(sort(cde_estimate*(y_grid[2]-y_grid[1]))))
plot(1-cumsum(sort(cde_estimate*(y_grid[2]-y_grid[1]))))
plot(g)
plot(cumsum(sort(cde_estimate*(y_grid[2]-y_grid[1]),decreasing = T)))
plot(g[length(g):1])
g <- rep(NA,length(t_grid))
for(i in seq_along(t_grid))
{
g[i] <- sum(cde_estimate[cde_estimate>t_grid[i]]*(y_grid[2]-y_grid[1]))
}
plot(cumsum(sort(cde_estimate*(y_grid[2]-y_grid[1]),decreasing = T)))
