return(list(prediction_bands=prediction_bands_which_belong,
yTest_covered=yTest_covered,
y_grid=y_grid))
} else {
return(list(prediction_bands=prediction_bands_which_belong,
y_grid=y_grid))
}
}
# returns statistics for evaluating prediction bands
# xTest is the test sample that was used (x"s are always the same)
# bands  list of outputs of cd_split_prediction_bands
# 1-alpha is the nominal coverage
eval_prediction_bands <- function(xTest,
bands,
alpha)
{
statistic <- matrix(NA,nrow(xTest),2)
colnames(statistic) <- c("coverage","size")
for(ii in 1:nrow(xTest))
{
statistic[ii,"coverage"] <- mean(sapply(bands,
function(x)x$yTest_covered[ii]))
statistic[ii,"size"] <- mean(sapply(bands,
function(x)
{
mean(x$prediction_bands[[ii]])*diff(range(bands[[1]]$y_grid))
}))
}
global_coverage <- mean(statistic[,"coverage"])
mean_absolute_deviation_coverage <- mean(abs(statistic[,"coverage"]-(1-alpha)))
average_size <- mean(statistic[,"size"])
mean_absolute_deviation_size <- mean(abs(statistic[,"coverage"]-average_size))
return(list(global_coverage=global_coverage,
mean_absolute_deviation_coverage=mean_absolute_deviation_coverage,
average_size=average_size,
mean_absolute_deviation_size=mean_absolute_deviation_size))
}
n_repetitions <- 100
n_each_set_grid <- round(seq(100,2000,length.out = 10)) # size of I1 and I2
n_test <- 10000 # to check coverage
d <- 1
k <- 100
percent_train <- 0.7
alpha <- 0.1
generate_data <- function(n,x=NULL) {generate_hom_gaussian(n=n,d=d,x=x)}
data_test_aux <- generate_data(n=n_test) # used to fix x test
cd_split_global <- list()
cd_split_local <- list()
dist_split <- list()
reg_split <- list()
reg_split_w <- list()
n_repetitions=3
for(rep in 1:n_repetitions)
{
data_test <- generate_data(n=n_test,x=data_test_aux$x)
# CD-split global
# reg-split
bands_reg_w[[rep]] <- reg_weighted_split_prediction_bands(regression_fit_mean_error$fit_mean,
regression_fit_mean_error$fit_error,
xTrain=data_I2$x,yTrain = data_I2$y,
xTest=data_test$x,
alpha=alpha,
y_grid = pred_I2$z,
yTest=data_test$y)
}
reg_weighted_split_prediction_bands <- function(reg_fit_mean,
reg_fit_error,
xTrain,yTrain,
xTest,
alpha=0.1,
y_grid,
yTest=NULL)
{
pred_train_mean <- predict(reg_fit_mean,xTrain)
pred_test_mean <- predict(reg_fit_mean,xTest)
pred_train_error <- predict(reg_fit_error,xTrain)
pred_test_error <- predict(reg_fit_error,xTest)
# observed densities:
conformity_score_train <- -abs(pred_train_mean-yTrain)/pred_train_error
if(!is.null(yTest))
{
yTest_covered <- rep(NA,length(yTest))
conformity_score_test <- -abs(pred_test_mean-yTest)/pred_test_error
}
#prediction_bands <- list()
prediction_bands_which_belong <- list()
ths <- quantile(conformity_score_train,probs=alpha)
for(ii in 1:nrow(xTest))
{
prediction_bands_which_belong[[ii]] <- -abs(y_grid-pred_test_mean[ii])/pred_test_error >=ths
}
if(!is.null(yTest))
{
yTest_covered <- conformity_score_test >= ths
}
if(!is.null(yTest))
{
return(list(prediction_bands=prediction_bands_which_belong,
yTest_covered=yTest_covered,
y_grid=y_grid))
} else {
return(list(prediction_bands=prediction_bands_which_belong,
y_grid=y_grid))
}
}
for(rep in 1:n_repetitions)
{
data_test <- generate_data(n=n_test,x=data_test_aux$x)
# CD-split global
# reg-split
bands_reg_w[[rep]] <- reg_weighted_split_prediction_bands(regression_fit_mean_error$fit_mean,
regression_fit_mean_error$fit_error,
xTrain=data_I2$x,yTrain = data_I2$y,
xTest=data_test$x,
alpha=alpha,
y_grid = pred_I2$z,
yTest=data_test$y)
}
eval_prediction_bands(xTest=data_test$x,
bands_reg_w,
alpha=alpha)
cd_split_local <- readRDS("/mnt/62e7a18d-9e67-46b5-8b12-bcb7dc0301ab/Dropbox/Izbicki/Research/UFSCar/Gilson/conformal-cde-experiments/rds/gaussian_het/cd_split_local.RDS")
grid_mu <- seq(100,200,length.out = 1000)
plot(grid_mu,dnorm(grid_mu,mu0,sigma))
# priori para mu
mu0 <- 170
sigma0 <- 5
tau0_2 <- 1/(sigma0)^2
plot(grid_mu,dnorm(grid_mu,mu0,sigma))
grid_mu <- seq(100,200,length.out = 1000)
# priori para mu
mu0 <- 170
sigma0 <- 5
tau0_2 <- 1/(sigma0)^2
plot(grid_mu,dnorm(grid_mu,mu0,sigma))
plot(grid_mu,dnorm(grid_mu,mu0,sigma0))
plot(grid_mu,dnorm(grid_mu,mu0,sigma0),
type="l",lwd=3)
plot(grid_mu,dnorm(grid_mu,mu0,sigma0),
type="l",lwd=3,xlab=expression(mu))
mu0 <- 165
sigma0 <- 5
tau0_2 <- 1/(sigma0)^2
plot(grid_mu,dnorm(grid_mu,mu0,sigma0),
type="l",lwd=3,xlab=expression(mu))
# dados
x <- 180
sigma <- 5
tau_2 <- 1/(sigma)^2
tau_linha_2 <- tau0_2 + tau_2
# posteriori
tau_linha_2 <- tau0_2 + tau_2
mu_linha <- tau0_2/tau_linha_2*mu0+
tau_2/tau_linha_2*x
abline(v=x,lwd=3)
lines(grid_mu,dnorm(grid_mu,mu_linha,1/sqrt(tau_linha_2)),
type="l",lwd=3,xlab=expression(mu),col=4)
grid_mu <- seq(100,200,length.out = 1000)
# priori para mu
mu0 <- 165
sigma0 <- 5
tau0_2 <- 1/(sigma0)^2
plot(grid_mu,dnorm(grid_mu,mu0,sigma0),
type="l",lwd=3,xlab=expression(mu),ylim=c(0,0.1))
# dados
x <- 180
sigma <- 5
tau_2 <- 1/(sigma)^2
abline(v=x,lwd=3)
# posteriori
tau_linha_2 <- tau0_2 + tau_2
mu_linha <- tau0_2/tau_linha_2*mu0+
tau_2/tau_linha_2*x
lines(grid_mu,dnorm(grid_mu,mu_linha,1/sqrt(tau_linha_2)),
type="l",lwd=3,xlab=expression(mu),col=4)
grid_mu <- seq(100,200,length.out = 1000)
# priori para mu
mu0 <- 165
sigma0 <- 5
tau0_2 <- 1/(sigma0)^2
plot(grid_mu,dnorm(grid_mu,mu0,sigma0),
type="l",lwd=3,xlab=expression(mu),ylim=c(0,0.15))
# dados
x <- 180
sigma <- 5
tau_2 <- 1/(sigma)^2
abline(v=x,lwd=3)
# posteriori
tau_linha_2 <- tau0_2 + tau_2
mu_linha <- tau0_2/tau_linha_2*mu0+
tau_2/tau_linha_2*x
lines(grid_mu,dnorm(grid_mu,mu_linha,1/sqrt(tau_linha_2)),
type="l",lwd=3,xlab=expression(mu),col=4)
grid_mu <- seq(100,200,length.out = 1000)
# priori para mu
mu0 <- 165
sigma0 <- 1
tau0_2 <- 1/(sigma0)^2
plot(grid_mu,dnorm(grid_mu,mu0,sigma0),
type="l",lwd=3,xlab=expression(mu),ylim=c(0,0.15))
# dados
x <- 180
sigma <- 5
tau_2 <- 1/(sigma)^2
abline(v=x,lwd=3)
# posteriori
tau_linha_2 <- tau0_2 + tau_2
mu_linha <- tau0_2/tau_linha_2*mu0+
tau_2/tau_linha_2*x
lines(grid_mu,dnorm(grid_mu,mu_linha,1/sqrt(tau_linha_2)),
type="l",lwd=3,xlab=expression(mu),col=4)
grid_mu <- seq(100,200,length.out = 1000)
# priori para mu
mu0 <- 165
sigma0 <- 5
tau0_2 <- 1/(sigma0)^2
plot(grid_mu,dnorm(grid_mu,mu0,sigma0),
type="l",lwd=3,xlab=expression(mu),ylim=c(0,0.15))
# dados
x <- 180
sigma <- 5
tau_2 <- 1/(sigma)^2
abline(v=x,lwd=3)
# posteriori
tau_linha_2 <- tau0_2 + tau_2
mu_linha <- tau0_2/tau_linha_2*mu0+
tau_2/tau_linha_2*x
lines(grid_mu,dnorm(grid_mu,mu_linha,1/sqrt(tau_linha_2)),
type="l",lwd=3,xlab=expression(mu),col=4)
grid_mu <- seq(100,200,length.out = 1000)
# priori para mu
mu0 <- 165
sigma0 <- 1
tau0_2 <- 1/(sigma0)^2
plot(grid_mu,dnorm(grid_mu,mu0,sigma0),
type="l",lwd=3,xlab=expression(mu),ylim=c(0,1))
# dados
x <- 180
sigma <- 5
tau_2 <- 1/(sigma)^2
abline(v=x,lwd=3)
# posteriori
tau_linha_2 <- tau0_2 + tau_2
mu_linha <- tau0_2/tau_linha_2*mu0+
tau_2/tau_linha_2*x
lines(grid_mu,dnorm(grid_mu,mu_linha,1/sqrt(tau_linha_2)),
type="l",lwd=3,xlab=expression(mu),col=4)
grid_mu <- seq(100,200,length.out = 1000)
# priori para mu
mu0 <- 165
sigma0 <- 1
tau0_2 <- 1/(sigma0)^2
plot(grid_mu,dnorm(grid_mu,mu0,sigma0),
type="l",lwd=3,xlab=expression(mu),ylim=c(0,0.4))
# dados
x <- 180
sigma <- 5
tau_2 <- 1/(sigma)^2
abline(v=x,lwd=3)
# posteriori
tau_linha_2 <- tau0_2 + tau_2
mu_linha <- tau0_2/tau_linha_2*mu0+
tau_2/tau_linha_2*x
lines(grid_mu,dnorm(grid_mu,mu_linha,1/sqrt(tau_linha_2)),
type="l",lwd=3,xlab=expression(mu),col=4)
grid_mu <- seq(100,200,length.out = 1000)
# priori para mu
mu0 <- 165
sigma0 <- 100
tau0_2 <- 1/(sigma0)^2
plot(grid_mu,dnorm(grid_mu,mu0,sigma0),
type="l",lwd=3,xlab=expression(mu),ylim=c(0,0.4))
# dados
x <- 180
sigma <- 5
tau_2 <- 1/(sigma)^2
abline(v=x,lwd=3)
# posteriori
tau_linha_2 <- tau0_2 + tau_2
mu_linha <- tau0_2/tau_linha_2*mu0+
tau_2/tau_linha_2*x
lines(grid_mu,dnorm(grid_mu,mu_linha,1/sqrt(tau_linha_2)),
type="l",lwd=3,xlab=expression(mu),col=4)
grid_mu <- seq(100,200,length.out = 1000)
library(ggplot2)
# priori para mu (altura média de um brasileiro)
mu0 <- 165
sigma0 <- 10
tau0_2 <- 1/(sigma0)^2
data_plot <- data.frame(grid_mu,
ggplot(data_plot)+
geom_line(aes(x=grid_mu,y=density))
grid_mu <- seq(100,200,length.out = 1000)
library(ggplot2)
# priori para mu (altura média de um brasileiro)
mu0 <- 165
sigma0 <- 10
tau0_2 <- 1/(sigma0)^2
data_plot <- data.frame(grid_mu,
density=dnorm(grid_mu,mu0,sigma0,distribution="prior"))
ggplot(data_plot)+
geom_line(aes(x=grid_mu,y=density))
data_plot <- data.frame(grid_mu,
density=dnorm(grid_mu,mu0,sigma0,distribution="prior"))
# dados (altura medida de um indivíduo - normal com média conhecida)
x <- 180
sigma <- 5
tau_2 <- 1/(sigma)^2
# posteriori
tau_linha_2 <- tau0_2 + tau_2
mu_linha <- tau0_2/tau_linha_2*mu0+
tau_2/tau_linha_2*x
data_plot <- rbind(data_plot,
density=dnorm(grid_mu,mu_linha,1/sqrt(tau_linha_2),
data_plot <- rbind(data_plot,
data.frame(mu=grid_mu,
density=dnorm(grid_mu,mu_linha,1/sqrt(tau_linha_2),
distribution="posterior")))
grid_mu <- seq(100,200,length.out = 1000)
library(ggplot2)
# priori para mu (altura média de um brasileiro)
mu0 <- 165
sigma0 <- 10
tau0_2 <- 1/(sigma0)^2
data_plot <- data.frame(mu=grid_mu,
density=dnorm(grid_mu,mu0,sigma0),
distribution="prior")
ggplot(data_plot)+
geom_line(aes(x=mu,y=density))
# dados (altura medida de um indivíduo - normal com média conhecida)
x <- 180
sigma <- 5
tau_2 <- 1/(sigma)^2
# posteriori
tau_linha_2 <- tau0_2 + tau_2
mu_linha <- tau0_2/tau_linha_2*mu0+
tau_2/tau_linha_2*x
data_plot <- rbind(data_plot,
data.frame(mu=grid_mu,
density=dnorm(grid_mu,mu_linha,1/sqrt(tau_linha_2),
distribution="posterior")))
data_plot <- rbind(data_plot,
data.frame(mu=grid_mu,
density=dnorm(grid_mu,mu_linha,1/sqrt(tau_linha_2)),
distribution="posterior"))
ggplot(data_plot)+
geom_line(aes(x=mu,y=density,color=distribution))
ggplot(data_plot)+
geom_line(aes(x=mu,y=density,color=distribution),size=2)
ggplot(data_plot)+
geom_line(aes(x=mu,y=density,color=distribution),size=2)+
theme_minimal()
ggplot(data_plot)+
geom_line(aes(x=mu,y=density,color=distribution),size=2)+
theme_minimal(base_size = 14)
ggplot(data_plot)+
geom_line(aes(x=mu,y=density,color=distribution),size=2)+
theme_minimal(base_size = 14)+xlab(expression(mu))+xlab("Density")
mu_linha
tau_linha_2
grid_mu <- seq(100,200,length.out = 1000)
library(ggplot2)
# priori para mu (altura média de um brasileiro)
mu0 <- 165
sigma0 <- 100
tau0_2 <- 1/(sigma0)^2
data_plot <- data.frame(mu=grid_mu,
density=dnorm(grid_mu,mu0,sigma0),
distribution="prior")
ggplot(data_plot)+
geom_line(aes(x=mu,y=density))
# dados (altura medida de um indivíduo - normal com média conhecida)
x <- 180
sigma <- 5
tau_2 <- 1/(sigma)^2
# posteriori
tau_linha_2 <- tau0_2 + tau_2
mu_linha <- tau0_2/tau_linha_2*mu0+
tau_2/tau_linha_2*x
data_plot <- rbind(data_plot,
data.frame(mu=grid_mu,
density=dnorm(grid_mu,mu_linha,1/sqrt(tau_linha_2)),
distribution="posterior"))
ggplot(data_plot)+
geom_line(aes(x=mu,y=density,color=distribution),size=2)+
theme_minimal(base_size = 14)+xlab(expression(mu))+ylab("Density")
grid_mu <- seq(100,200,length.out = 1000)
library(ggplot2)
# priori para mu (altura média de um brasileiro)
mu0 <- 165
sigma0 <- 20
tau0_2 <- 1/(sigma0)^2
data_plot <- data.frame(mu=grid_mu,
density=dnorm(grid_mu,mu0,sigma0),
distribution="prior")
ggplot(data_plot)+
geom_line(aes(x=mu,y=density))
# dados (altura medida de um indivíduo - normal com média conhecida)
x <- 180
sigma <- 5
tau_2 <- 1/(sigma)^2
# posteriori
tau_linha_2 <- tau0_2 + tau_2
mu_linha <- tau0_2/tau_linha_2*mu0+
tau_2/tau_linha_2*x
data_plot <- rbind(data_plot,
data.frame(mu=grid_mu,
density=dnorm(grid_mu,mu_linha,1/sqrt(tau_linha_2)),
distribution="posterior"))
ggplot(data_plot)+
geom_line(aes(x=mu,y=density,color=distribution),size=2)+
theme_minimal(base_size = 14)+xlab(expression(mu))+ylab("Density")
library(ggplot2)
grid_mu <- seq(100,200,length.out = 1000)
# priori para mu (altura média de um brasileiro)
mu0 <- 165
sigma0 <- 10
tau0_2 <- 1/(sigma0)^2
data_plot <- data.frame(mu=grid_mu,
density=dnorm(grid_mu,mu0,sigma0),
distribution="priori")
# dados (altura medida de um indivíduo - normal com média conhecida)
x <- 180
sigma <- 5
tau_2 <- 1/(sigma)^2
# posteriori
tau_linha_2 <- tau0_2 + tau_2
mu_linha <- tau0_2/tau_linha_2*mu0+
tau_2/tau_linha_2*x
data_plot <- rbind(data_plot,
data.frame(mu=grid_mu,
density=dnorm(grid_mu,mu_linha,1/sqrt(tau_linha_2)),
distribution="posteriori"))
ggplot(data_plot)+
geom_line(aes(x=mu,y=density,color=distribution),size=1.2)+
theme_minimal(base_size = 14)+xlab(expression(mu))+ylab("Densidade")+
theme(legend.title=element_blank())
# X ~ N(mu,sigma)
sigma <- 7.5
mu <- 170
alturas <- rnorm(100,mu,sigma)
hist(alturas)
# Frequentista, EMV
mean(alturas)
#  Bayesiano
mu0 <- 165
lambda <- 1
grid_tau <- seq(0,0.1,length.out = 10000)
beta <- 1
alpha <- 0.1*beta
hist(rgamma(1000,
alpha,beta))
plot(grid_tau,dgamma(grid_tau,
alpha,beta))
hist(rgamma(1000,
alpha,beta))
plot(grid_tau,dgamma(grid_tau,
alpha,beta))
grid_tau <- seq(0,0.01,length.out = 10000)
beta <- 1
alpha <- 0.1*beta
plot(grid_tau,dgamma(grid_tau,
alpha,beta))
?dgamma
# X ~ N(mu,sigma)
sigma <- 0.75
mu <- 1.70
alturas <- rnorm(100,mu,sigma)
hist(alturas)
grid_tau <- seq(0,0.01,
length.out = 10000)
beta <- 1
alpha <- 100*beta
plot(grid_tau,dgamma(grid_tau,
alpha,beta))
grid_tau <- seq(0,300,
length.out = 10000)
beta <- 1
alpha <- 100*beta
plot(grid_tau,dgamma(grid_tau,
alpha,beta))
setwd("/mnt/62e7a18d-9e67-46b5-8b12-bcb7dc0301ab/Dropbox/Izbicki/Research/UFSCar/Gilson/conformal-cde-experiments")
source("requirements.R")
source("base_functions.R")
data_plot <- read_all_rds("rds/bimodal/")
plot_perfomance_n(data_plot)
data_plot <- read_all_rds("rds/gaussian_het/")
plot_perfomance_n(data_plot)
data_plot <- read_all_rds("rds/gaussian_het/")
plot_perfomance_n(data_plot)
data_plot <- read_all_rds("rds/gaussian_het/")
plot_perfomance_n(data_plot)
source("requirements.R")
source("base_functions.R")
data_plot <- read_all_rds_1d("rds/1d_examples_bimodal/")
n_test <- 500
x_grid <- seq(-1.5,1.5,length.out = n_test)
data_plot$x_grid <- x_grid
data_plot$coverage_plus <-data_plot$coverage+data_plot$error
data_plot$coverage_minus <-data_plot$coverage-data_plot$error
ggplot()+
geom_line(data = data_plot,aes(x=x_grid,y=coverage,color=method))+
theme_bw()+coord_cartesian(ylim=c(0,1))
ggplot(data = data_plot %>% filter(method=="reg_split"))+
geom_line(aes(x=x_grid,y=coverage,color=method))+
geom_ribbon(aes(x=x_grid,ymin=coverage_minus,ymax=coverage_plus,fill=method))+
theme_bw()+coord_cartesian(ylim=c(0,1))
data_plot$error
data_plot$coverage
cd_split_local <- readRDS("/mnt/62e7a18d-9e67-46b5-8b12-bcb7dc0301ab/Dropbox/Izbicki/Research/UFSCar/Gilson/conformal-cde-experiments/rds/1d_examples_bimodal/cd_split_local.RDS")
cd_split_local[[1]]$coverage_mean
plot(cd_split_local[[1]]$coverage_mean)
